import tensorflow as tf
import keras_tuner as kt
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np

train_277_image = np.load('train_277_image.npy')
train_356_image = np.load('train_356_image.npy')
train_444_image = np.load('train_444_image.npy')
train_ebv = np.load('train_ebv.npy')

def layer (input, hp) :
    x = keras.layers.Conv2D(filters=hp.Int('filters_first_'+str(input), 4, 64, step=8, default=32), 
                            kernel_size=3, 
                            activation='relu',
                            padding='same'
    )(input)

    for i in range(hp.Int('conv_layers_'+str(input), 1, 4, default=2)) :
        x = tf.keras.layers.Conv2D(
            filters=hp.Int('filters_'+str(i)+'_'+str(input), 4, 64, step=4, default=32),
            kernel_size=3,
            activation='relu',
            padding='same'
        )(x)
      
        x = tf.keras.layers.BatchNormalization()(x)

        if hp.Choice('pooling_'+str(i)+'_'+str(input), ['max','avg']) == 'max' :
            x = tf.keras.layers.MaxPooling2D(pool_size=(2,2))(x)
        else :
            x = tf.keras.layers.AveragePooling2D(pool_size=(2,2))(x)
      
    x = keras.layers.Flatten()(x)
    
    return x

def model_builder (hp) :
    input_shape = (32, 32, 1)

    input277 = keras.Input(input_shape)
    input356 = keras.Input(input_shape)
    input444 = keras.Input(input_shape)
    input_ratio = keras.Input(1)

    f1 = layer(input277, hp)
    f2 = layer(input356, hp)
    f3 = layer(input444, hp)
    
    x = keras.layers.concatenate([f1, f2, f3])

    for i in range(hp.Int('dense_layers', 1, 4, default=2)) :
        x = tf.keras.layers.Dense(
            units=hp.Int('dense_'+str(i), 8, 64, step=4, default=32),
            activation='relu'
        )(x)

    x = tf.keras.layers.Dropout(0.5)(x)
    outputs = tf.keras.layers.Dense(1, activation='softplus')(x)

    model = tf.keras.Model([input277, input356, input444], outputs)

    model.compile(
        optimizer=tf.optimizers.Adam(learning_rate=hp.Choice('learning_rate', values=[1e-2, 5e-3, 1e-3, 5e-4, 1e-4])), 
        loss=tf.keras.losses.MeanAbsolutePercentageError()
    )

    model.summary()

    return model

class MyTuner(kt.tuners.BayesianOptimization) :
    def run_trial(self, trial, *args, **kwargs) :
        print("hello")
        kwargs['batch_size'] = trial.hyperparameters.Int('batch_size', 64, 256, step=32, default=128)
        kwargs['epochs'] = trial.hyperparameters.Int('epochs', 10, 30)
        return super(MyTuner, self).run_trial(trial, *args, **kwargs)

tuner = MyTuner(model_builder, objective='val_loss', max_trials=5, directory='dir', project_name='3bands_ebv')

stop_early = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)

tuner.search([train_277_image, train_356_image, train_444_image], train_ebv, 
             validation_split=0.15, callbacks=[stop_early])
